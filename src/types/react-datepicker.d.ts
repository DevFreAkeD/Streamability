// src/types/react-datepicker.d.ts
declare module 'react-datepicker' {
    import * as React from 'react';
  
    interface ReactDatePickerProps {
      selected?: Date | null;
      onChange?: (date: Date | null, event: React.SyntheticEvent<any> | undefined) => void;
      onSelect?: (date: Date, event: React.SyntheticEvent<any> | undefined) => void;
      onClickOutside?: (event: React.MouseEvent<HTMLDivElement>) => void;
      onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;
      onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;
      onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
      onInputClick?: () => void;
      onMonthChange?: (date: Date) => void;
      onCalendarOpen?: () => void;
      onCalendarClose?: () => void;
      minDate?: Date;
      maxDate?: Date;
      showDisabledMonthNavigation?: boolean;
      placeholderText?: string;
      className?: string;
      wrapperClassName?: string;
      calendarClassName?: string;
      popperClassName?: string;
      customInput?: React.ReactNode;
      customInputRef?: string;
      dateFormat?: string;
      includeDates?: Date[];
      excludeDates?: Date[];
      filterDate?: (date: Date) => boolean;
      dateFormatCalendar?: string;
      yearDropdownItemNumber?: number;
      scrollableYearDropdown?: boolean;
      showYearDropdown?: boolean;
      showMonthDropdown?: boolean;
      showTimeSelect?: boolean;
      showTimeSelectOnly?: boolean;
      timeFormat?: string;
      timeIntervals?: number;
      minTime?: Date;
      maxTime?: Date;
      excludeTimes?: Date[];
      useWeekdaysShort?: boolean;
      formatWeekDay?: (date: Date) => string;
      filterTime?: (date: Date) => boolean;
      timeCaption?: string;
      openToDate?: Date;
      peekNextMonth?: boolean;
      showMonthYearPicker?: boolean;
      showFullMonthYearPicker?: boolean;
      showTwoColumnMonthYearPicker?: boolean;
      showFourColumnMonthYearPicker?: boolean;
      showYearPicker?: boolean;
      showQuarterYearPicker?: boolean;
      showPopperArrow?: boolean;
      excludeScrollbar?: boolean;
      disabled?: boolean;
      disabledKeyboardNavigation?: boolean;
      inline?: boolean;
      readOnly?: boolean;
      required?: boolean;
      tabIndex?: number;
      title?: string;
      todayButton?: React.ReactNode;
      useShortMonthInDropdown?: boolean;
      weekLabel?: string;
      withPortal?: boolean;
      portalId?: string;
      forceShowMonthNavigation?: boolean;
      fixedHeight?: boolean;
      onChangeRaw?: (event: React.FocusEvent<HTMLInputElement>) => void;
      renderCustomHeader?: (params: {
        date: Date;
        changeYear: (year: number) => void;
        changeMonth: (month: number) => void;
        decreaseMonth: () => void;
        increaseMonth: () => void;
        prevMonthButtonDisabled: boolean;
        nextMonthButtonDisabled: boolean;
      }) => React.ReactNode;
      renderDayContents?: (dayOfMonth: number, date: Date) => React.ReactNode;
      dropdownMode?: 'scroll' | 'select';
      adjustDateOnChange?: boolean;
      autoComplete?: string;
      weekStartsOn?: number;
      monthsShown?: number;
      showPreviousMonths?: boolean;
      startOpen?: boolean;
      clearButtonTitle?: string;
      previousMonthButtonLabel?: string;
      nextMonthButtonLabel?: string;
      open?: boolean;
      selectsRange?: boolean;
      selectsStart?: boolean;
      selectsEnd?: boolean;
      startDate?: Date | null;
      endDate?: Date | null;
      inlineClassName?: string;
      focusSelectedMonth?: boolean;
      monthsRangeTitle?: (startMonth: string, endMonth: string) => string;
      calendarStartDay?: number;
    }
  
    const ReactDatePicker: React.ComponentClass<ReactDatePickerProps>;
    export default ReactDatePicker;
  }  